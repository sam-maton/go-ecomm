// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
)

const getProductVariants = `-- name: GetProductVariants :many
SELECT categories.gender, categories.category, categories.product_type, products.id AS product_id, products.name, products.description, products.price, product_variants.id AS variant_id, product_variants.color, product_variants.price_override
FROM categories
INNER JOIN products ON categories.id = products.category_id
INNER JOIN product_variants ON products.id = product_variants.product_id
WHERE 
  (category = $1 OR NOT $2::bool  ) AND 
  (product_type = $3 OR NOT $4::bool)  AND 
  (gender = $5 OR NOT $6::bool)
`

type GetProductVariantsParams struct {
	Category       string
	UseCategory    bool
	ProductType    string
	UseProductType bool
	Gender         Gender
	UseGender      bool
}

type GetProductVariantsRow struct {
	Gender        Gender
	Category      string
	ProductType   string
	ProductID     int32
	Name          string
	Description   string
	Price         sql.NullInt32
	VariantID     int32
	Color         string
	PriceOverride sql.NullInt32
}

func (q *Queries) GetProductVariants(ctx context.Context, arg GetProductVariantsParams) ([]GetProductVariantsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductVariants,
		arg.Category,
		arg.UseCategory,
		arg.ProductType,
		arg.UseProductType,
		arg.Gender,
		arg.UseGender,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductVariantsRow
	for rows.Next() {
		var i GetProductVariantsRow
		if err := rows.Scan(
			&i.Gender,
			&i.Category,
			&i.ProductType,
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.VariantID,
			&i.Color,
			&i.PriceOverride,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
